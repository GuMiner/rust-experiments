

#[derive(PartialEq)]
struct MarkerDemo {
    fill_markers: bool,
    marker_radius: f32,
    automatic_colors: bool,
    marker_color: Color32, // Mutable, modified by below logic.
}

impl Default for MarkerDemo {
    fn default() -> Self {
        Self {
            fill_markers: true,
            marker_radius: 5.0,
            automatic_colors: true,
            marker_color: Color32::GREEN,
        }
    }
}

impl MarkerDemo {
    fn markers(&self) -> Vec<Points> {
        MarkerShape::all()
            .enumerate()
            .map(|(i, marker)| {
                let y_offset = i as f64 * 0.5 + 1.0;
                let mut points = Points::new(vec![
                    [1.0, 0.0 + y_offset],
                    [2.0, 0.5 + y_offset],
                    [3.0, 0.0 + y_offset],
                    [4.0, 0.5 + y_offset],
                    [5.0, 0.0 + y_offset],
                    [6.0, 0.5 + y_offset],
                ])
                .name(format!("{:?}", marker))
                .filled(self.fill_markers)
                .radius(self.marker_radius)
                .shape(marker);

                if !self.automatic_colors {
                    points = points.color(self.marker_color);
                }

                points
            })
            .collect()
    }

    fn ui(&mut self, ui: &mut Ui) -> Response {
        ui.horizontal(|ui| {
            ui.checkbox(&mut self.fill_markers, "Fill");
            ui.add(
                egui::DragValue::new(&mut self.marker_radius)
                    .speed(0.1)
                    .clamp_range(0.0..=f64::INFINITY)
                    .prefix("Radius: "),
            );
            ui.checkbox(&mut self.automatic_colors, "Automatic colors");
            if !self.automatic_colors {
                ui.color_edit_button_srgba(&mut self.marker_color);
            }
        });

        let markers_plot = Plot::new("markers_demo")
            .data_aspect(1.0)
            .legend(Legend::default());
        markers_plot
            .show(ui, |plot_ui| {
                for marker in self.markers() {
                    plot_ui.points(marker);
                }
            })
            .response
    }
}


            ui.add(egui::Slider::new(&mut self.age, 0..=120).text("age"));
            if ui.button("Click each year").clicked() {
                self.age += 1;
            }
            ui.label(format!("Hello '{}', age {}", self.name, self.age));


            
    // Figure out all cross-point distance pairs
    print!("Loaded {} points\n", merged_points.len());
    // This can be zero if cancellation happens elsewhere. TODO fix.
    let mut pairs_with_distances = Vec::new();
    for i in 0..(points.len() - 1) {
        // Early-exit if any data received.
        match canceller.try_recv() {
            Ok(_) => return,
            Err(_) => {}
        }

        for j in (i + 1)..points.len() {
            let distance = points[i].dist_sqd(&points[j]);
            pairs_with_distances.push((distance, i, j));
        }
    }

    // Custom comparator required because Rust doesn't know how to sort floats by default
    pairs_with_distances.sort_unstable_by(|a, b| a.partial_cmp(b).unwrap());
    print!("Points sorted into {}\n", pairs_with_distances.len());

    let mut children_of: HashMap<i32, Vec<i32>> = HashMap::new();
    for i in 0..points.len() {
        children_of.insert(i as i32, Vec::new());
    }

    let mut total_clusters: i32 = points.len() as i32;
    // Iterate through point distances, slowly connecting clusters together
    // Future variations of this could merge close points, even if it drops the cluster count < config.num_colors
    for i in 0..pairs_with_distances.len() {
        
        // Early-exit if any data received.
        match canceller.try_recv() {
            Ok(_) => return,
            Err(_) => {}
        }

        let (_, first, second) = pairs_with_distances[i];

        // TODO this merging isn't quite correct. Runs fast enough though. TODO fix.
        let first_cluster = merged_points[first].cluster_id;
        let second_cluster = merged_points[second].cluster_id;
        if clusters_equal(first_cluster, second_cluster) {
            // Clusters equal, do nothing
        } else {
            // Merge first cluster into second
            let merge_cluster = get_merge_cluster(second, second_cluster);
            let source_cluster = get_merge_cluster(first, first_cluster);

            // Move children to the new cluster. TODO move children list
            for child in get_children(&children_of, source_cluster) {
                merged_points[*child as usize].cluster_id = merge_cluster;
            }

            // Move this specific point to the new cluster
            merged_points[source_cluster as usize].cluster_id = merge_cluster;
            add_child(&mut children_of, merge_cluster, source_cluster);
            
            total_clusters = total_clusters - 1;
            if total_clusters == config.num_colors {
                break;
            }
        }
    }
